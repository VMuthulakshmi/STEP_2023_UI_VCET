{"ast":null,"code":"import MockData from \"../resources/data/mockData.json\";\nexport class RestaurantService {\n  /**\n   * Function to fetch the restaurant data from service and assign it to restaurantData Static variable.\n   */\n  static async fetchRestaurantsData() {\n    try {\n      RestaurantService.restaurantsData = MockData;\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  /**\n   * Function to get the list of restaurants data\n   * @returns restaurants list array\n   */\n  static async getRestaurantsList() {\n    let restaurantsList = [];\n    try {\n      if (!RestaurantService.restaurantsData) {\n        await RestaurantService.fetchRestaurantsData();\n      }\n      RestaurantService.restaurantsData.forEach(restaurant => {\n        let restData = {\n          id: restaurant.id,\n          name: restaurant.name,\n          reviews: restaurant.reviews,\n          cuisines: restaurant.cuisines,\n          rating: restaurant.rating,\n          img: restaurant.feature_image\n        };\n        restaurantsList.push(restData);\n      });\n      console.log(\"getRestaurantsList returns\", restaurantsList);\n    } catch (err) {\n      console.log(err);\n    }\n    return JSON.parse(JSON.stringify(restaurantsList));\n  }\n\n  /**\n   * Function to get a specific restaurant detail\n   * @param id - restaurant id\n   * @returns restaurant detail\n   */\n  static async getRestaurantDetail(id) {\n    let restaurantDetail = null;\n    try {\n      if (!RestaurantService.restaurantsData) {\n        await RestaurantService.fetchRestaurantsData();\n      }\n      restaurantDetail = RestaurantService.restaurantsData.find(restaurant => id === restaurant.id);\n      return JSON.parse(JSON.stringify(restaurantDetail));\n    } catch (err) {\n      console.log(err);\n    }\n    return restaurantDetail;\n  }\n}\nRestaurantService.restaurantsData = null;","map":{"version":3,"names":["MockData","RestaurantService","fetchRestaurantsData","restaurantsData","err","getRestaurantsList","restaurantsList","forEach","restaurant","restData","id","name","reviews","cuisines","rating","img","feature_image","push","console","log","JSON","parse","stringify","getRestaurantDetail","restaurantDetail","find"],"sources":["/Users/siriusit/Desktop/react practice STEP/src/services/RestaurantService.js"],"sourcesContent":["import MockData from \"../resources/data/mockData.json\";\n\nexport class RestaurantService {\n  static restaurantsData = null;\n\n  /**\n   * Function to fetch the restaurant data from service and assign it to restaurantData Static variable.\n   */\n  static async fetchRestaurantsData() {\n    try {\n      RestaurantService.restaurantsData = MockData;\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  /**\n   * Function to get the list of restaurants data\n   * @returns restaurants list array\n   */\n  static async getRestaurantsList() {\n    let restaurantsList = [];\n    try {\n      if (!RestaurantService.restaurantsData) {\n        await RestaurantService.fetchRestaurantsData();\n      }\n\n      RestaurantService.restaurantsData.forEach(restaurant => {\n        let restData = {\n          id: restaurant.id,\n          name: restaurant.name,\n          reviews: restaurant.reviews,\n          cuisines: restaurant.cuisines,\n          rating: restaurant.rating,\n          img: restaurant.feature_image\n        };\n        restaurantsList.push(restData);\n      });\n      console.log(\"getRestaurantsList returns\", restaurantsList);\n    } catch (err) {\n      console.log(err);\n    }\n\n    return JSON.parse(JSON.stringify(restaurantsList));\n  }\n\n  /**\n   * Function to get a specific restaurant detail\n   * @param id - restaurant id\n   * @returns restaurant detail\n   */\n  static async getRestaurantDetail(id) {\n    let restaurantDetail = null;\n    try {\n      if (!RestaurantService.restaurantsData) {\n        await RestaurantService.fetchRestaurantsData();\n      }\n      restaurantDetail = RestaurantService.restaurantsData.find(\n        restaurant => id === restaurant.id\n      );\n      return JSON.parse(JSON.stringify(restaurantDetail));\n    } catch (err) {\n      console.log(err);\n    }\n    return restaurantDetail;\n  }\n}\n"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,iCAAiC;AAEtD,OAAO,MAAMC,iBAAiB,CAAC;EAG7B;AACF;AACA;EACE,aAAaC,oBAAoBA,CAAA,EAAG;IAClC,IAAI;MACFD,iBAAiB,CAACE,eAAe,GAAGH,QAAQ;IAC9C,CAAC,CAAC,OAAOI,GAAG,EAAE;MACZ,MAAMA,GAAG;IACX;EACF;;EAEA;AACF;AACA;AACA;EACE,aAAaC,kBAAkBA,CAAA,EAAG;IAChC,IAAIC,eAAe,GAAG,EAAE;IACxB,IAAI;MACF,IAAI,CAACL,iBAAiB,CAACE,eAAe,EAAE;QACtC,MAAMF,iBAAiB,CAACC,oBAAoB,CAAC,CAAC;MAChD;MAEAD,iBAAiB,CAACE,eAAe,CAACI,OAAO,CAACC,UAAU,IAAI;QACtD,IAAIC,QAAQ,GAAG;UACbC,EAAE,EAAEF,UAAU,CAACE,EAAE;UACjBC,IAAI,EAAEH,UAAU,CAACG,IAAI;UACrBC,OAAO,EAAEJ,UAAU,CAACI,OAAO;UAC3BC,QAAQ,EAAEL,UAAU,CAACK,QAAQ;UAC7BC,MAAM,EAAEN,UAAU,CAACM,MAAM;UACzBC,GAAG,EAAEP,UAAU,CAACQ;QAClB,CAAC;QACDV,eAAe,CAACW,IAAI,CAACR,QAAQ,CAAC;MAChC,CAAC,CAAC;MACFS,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEb,eAAe,CAAC;IAC5D,CAAC,CAAC,OAAOF,GAAG,EAAE;MACZc,OAAO,CAACC,GAAG,CAACf,GAAG,CAAC;IAClB;IAEA,OAAOgB,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAAChB,eAAe,CAAC,CAAC;EACpD;;EAEA;AACF;AACA;AACA;AACA;EACE,aAAaiB,mBAAmBA,CAACb,EAAE,EAAE;IACnC,IAAIc,gBAAgB,GAAG,IAAI;IAC3B,IAAI;MACF,IAAI,CAACvB,iBAAiB,CAACE,eAAe,EAAE;QACtC,MAAMF,iBAAiB,CAACC,oBAAoB,CAAC,CAAC;MAChD;MACAsB,gBAAgB,GAAGvB,iBAAiB,CAACE,eAAe,CAACsB,IAAI,CACvDjB,UAAU,IAAIE,EAAE,KAAKF,UAAU,CAACE,EAClC,CAAC;MACD,OAAOU,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAACE,gBAAgB,CAAC,CAAC;IACrD,CAAC,CAAC,OAAOpB,GAAG,EAAE;MACZc,OAAO,CAACC,GAAG,CAACf,GAAG,CAAC;IAClB;IACA,OAAOoB,gBAAgB;EACzB;AACF;AAhEavB,iBAAiB,CACrBE,eAAe,GAAG,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}